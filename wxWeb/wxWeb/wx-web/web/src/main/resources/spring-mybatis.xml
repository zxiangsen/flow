<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task-3.1.xsd">


    <!-- 提供@Autowired，@Resource等注解，自动扫描bean。context:component-scan标签也包含了此功能，所以可以移除此配置 -->
    <!--<context:annotation-config/>-->

    <!-- 配置扫描注解,不扫描@Controller注解 -->
    <context:component-scan base-package="com.douya">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 开启定时器 -->
    <!--<task:annotation-driven />-->
    <!-- 配置定时器线程池，可以同时执行同一时间的任务，否则是按照顺序执行 -->
    <task:annotation-driven scheduler="myScheduler"/>
    <task:scheduler id="myScheduler" pool-size="4"/>

    <!-- 第一种方式：加载一个properties文件 -->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>-->

    <!-- 加载多个properties文件，注意：spring不能单独多个加载PropertyPlaceholderConfigurer -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- ============== 最常用配置 ================ -->
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>${c3p0.acquireIncrement}</value>
        </property>

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>${c3p0.initialPoolSize}</value>
        </property>

        <!-- 连接池保持的最小连接数,default : 3 -->
        <property name="minPoolSize">
            <value>${c3p0.minPoolSize}</value>
        </property>

        <!-- 连接池中拥有的最大连接数,default : 15 -->
        <property name="maxPoolSize">
            <value>${c3p0.maxPoolSize}</value>
        </property>

        <!-- ================= 管理连接池连接的生存时间和检查时间 ================= -->
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 单位 s-->
        <property name="maxIdleTime">
            <value>${c3p0.maxIdleTime}</value>
        </property>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod">
            <value>${c3p0.idleConnectionTestPeriod}</value>
        </property>


        <!-- ======================== 配置PreparedStatement缓存 ===================== -->
        <!-- 连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,
            所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements">
            <value>${c3p0.maxStatements}</value>
        </property>

        <!-- 连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，
                如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0 -->
        <property name="maxStatementsPerConnection">
            <value>${c3p0.maxStatementsPerConnection}</value>
        </property>

        <!-- =============== 其他 =================== -->
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过
              多线程实现多个操作同时被执行。Default: 3-->
        <property name="numHelperThreads">
            <value>${c3p0.numHelperThreads}</value>
        </property>

        <!-- 连接池在回收数据库连接时是否自动提交事务。如果为false，则会回滚未提交的事务，
            如果为true，则会自动提交事务。default : false（不建议使用） -->
        <property name="autoCommitOnClose">
            <value>${c3p0.autoCommitOnClose}</value>
        </property>
    </bean>

<!--   &lt;!&ndash;&lt;!&ndash; mybatis和spring完美整合，不需要mybatis的配置映射文件 &ndash;&gt;&ndash;&gt;
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        &lt;!&ndash;&lt;!&ndash; 自动扫描mapping.xml文件 &ndash;&gt;&ndash;&gt;
        <property name="mapperLocation" value="classpath:mapper/*.xml"></property>
    </bean>
   &lt;!&ndash; &lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;&ndash;&gt;
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.douya.dao"/>
        <property name="sqlSessionFactoryBeanNameapp" value="sqlSessionFactory"></property>
    </bean>-->

    <!-- web -->
    <bean id="sqlSessionFactoryweb" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:webmapper/*.xml"></property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.douya.webdao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryweb"></property>
    </bean>

    <!-- (事务管理配置) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- (开启事务管理) -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>